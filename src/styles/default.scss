
// @import "../../node_modules/material-design-lite/src/_color-definitions.scss";
// $color-primary: "233,149,150";
// $color-primary-dark: "33,49,50";
// $color-accent: "233,149,50";
// $color-primary-contrast:"133,249,50";
// $color-accent-contrast:"233,49,250";


@import "../../node_modules/material-design-lite/src/_variables.scss";


// @import "../../node_modules/materialize-css/sass/components/mixins";
// @import "../../node_modules/materialize-css/sass/components/color";

// Variables;
// @import "../../node_modules/materialize-css/sass/components/variables";

// Reset
// @import "../../node_modules/materialize-css/sass/components/normalize";

// components
// @import "../../node_modules/materialize-css/sass/components/global";
// @import "materialize-css/sass/components/icons-material-design";
// @import "materialize-css/sass/components/grid";
// @import "materialize-css/sass/components/navbar";
// @import "materialize-css/sass/components/roboto";
// @import "materialize-css/sass/components/typography";
// @import "materialize-css/sass/components/cards";
// @import "materialize-css/sass/components/toast";
// @import "materialize-css/sass/components/tabs";
// @import "materialize-css/sass/components/tooltip";
// @import "../../node_modules/materialize-css/sass/components/buttons";
// @import "../../node_modules/materialize-css/sass/components/waves";
// @import "../../node_modules/materialize-css/sass/materialize";
//@import '../../node_modules/materialize-css/sass/components/_buttons.scss';
//@import '../../node_modules/materialize-css/sass/components/_waves.scss';



$orangedark:#F07818;
$orangelight:#F0A830;
$reddark:#E91818;
$beige:#FCEBB6;
$redlight:#E36937;
$bluelight:#91CED7;
$bluedark:#0F6177;
$braun:#9E5428;
$greendark:#27AE60;
$green:#799412;
$blacklight:#091414;

$roya-blue: rgba(140,200,233,1.0);
$roya-blue: #6f9;
$roya-blue: #FF3333;
$roya-blue: #69F;
$roya-blue: #96F;
$roya-blue: #F96;
$roya-blue:#91CED7;
$roya-blue:#81BED7;
$roya-blue:#81BED7;

$roya-blue:#69F;
$roya-blue:#61b6f9;
// $roya-blue:#68c4f7;

// $trim-color-classes: false !default;

// $color-primary: $palette-blue-800 !default;
// $color-primary-dark: $palette-red-500 !default;
// $color-accent: $palette-red-500 !default;

// $color-primary: $palette-pink-700 !default;
// $color-primary-dark: $palette-pink-700 !default;
// $color-accent: $palette-pink-700 !default;
// $color-primary-contrast: $palette-pink-700 !default;
// $color-accent-contrast: $palette-pink-700 !default;

// $backgroundimg:'../images/RoyaLearning9.png';


@mixin transitionAll($duration) {
    -webkit-transition: all $duration ease-out;
    -moz-transition: all $duration ease-out;
    -ms-transition: all $duration ease-out;
    -o-transition: all $duration ease-out;
    transition: all $duration ease-out;
}

@function number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }
  
  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
  
  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);
    
    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i))
    }
    
    @if $character == '.' {
      $digits: 1; 
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);  
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }
  
  @return if($minus, -$result, $result);;
}

@function getMdlColor($string) {

   $index : str-index($string,  ",");

   $r : number(str-slice($string, 1, $index - 1));
   $str-2 : str-slice($string, $index + 1);
   $index : str-index($str-2,  ",");
   $g : number(str-slice($str-2, 1, $index - 1));
   $b : number(str-slice($str-2, $index + 1));

   @return rgb($r,$g,$b);
}


@mixin textGlitch($name, $intensity, $textColor, $background, $highlightColor1, $highlightColor2, $width, $height) {
  font-family: 'Dancing Script', Tahoma, sans-serif;
  color: $textColor;
  position: relative;
  $steps: $intensity;
  
  // Ensure the @keyframes are generated at the root level
  @at-root {
    // We need two different ones
    @for $i from 1 through 2 {
      @keyframes #{$name}-anim-#{$i} {
        @for $i from 0 through $steps/10 {
          #{percentage($i*(1/$steps))} {
            clip: rect(
              random($height)+px,
              $width+px,
              random($height)+px,
              0
            );
          }
        }
        @for $i from $steps/10 through $steps {
          #{percentage($i*(1/$steps))} {
            clip: rect(0,0,0,0);
          }
        }
      }
    }
  }
  &:before,
  &:after {
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    background: $background;
    clip: rect(0, 0, 0, 0); 
  }
  &:after {
    left: 1.5px;
    text-shadow: -2px 0 $highlightColor1;
    animation: #{$name}-anim-1 10s infinite linear alternate-reverse;
  }
  &:before {
    left: -1.5px;
    text-shadow: 2px 0 $highlightColor2; 
    animation: #{$name}-anim-2 15s infinite linear alternate-reverse;
  }
  
}


@mixin imgGlitch($name, $intensity, $width, $height, $top, $left) {
  
  $steps: $intensity;
  
  // Ensure the @keyframes are generated at the root level
  @at-root {
    // We need two different ones
    @for $i from 1 through 2 {
      @keyframes #{$name}-anim-#{$i} {
        @for $i from 0 through $steps {
          #{percentage($i*(1/$steps))} {
            clip: rect(
              random($height)+px,
              $width+px,
              random($height)+px,
              0
            );
          }
        }
      }
    }
  }
  
  > img {
    position: absolute;
    top: $top+px;
    left: $left+px;
  }
  > img:nth-child(2),
  > img:nth-child(3){
    clip: rect(0, 0, 0, 0); 
  }
  > img:nth-child(2) {
    left: ($left + 2) + px;
    animation: #{$name}-anim-1 2s infinite linear alternate-reverse;
  }
  > img:nth-child(3) {
    left: ($left - 2) + px;
    animation: #{$name}-anim-2 3s infinite linear alternate-reverse;
  }
}



@mixin svgGlitch($name, $intensity, $fillColor, $background, $fillHighlight1, $fillHighlight2, $width, $height, $top, $left) {
  
  $steps: $intensity;
  
  // Ensure the @keyframes are generated at the root level
  @at-root {
    // We need two different ones
    @for $i from 1 through 2 {
      @keyframes #{$name}-anim-#{$i} {
        @for $i from 0 through $steps {
          #{percentage($i*(1/$steps))} {
            clip: rect(
              (random($height)-20)+px,
              $width+px,
              (random($height)+20)+px,
              0
            );
          }
        }
      }
    }
  }
  
  svg {
    position: absolute;
    top: $top+px;
    left: $left+px;
    fill: $fillColor;
    background: $background;
    width: $width+px;
    height: $height+px;
  }
  svg:nth-child(2),
  svg:nth-child(3) {
    clip: rect(0, 0, 0, 0); 
  }
  svg:nth-child(2) {
    fill: $fillHighlight1;
    left: ($left - 2) + px;
    animation: #{$name}-anim-1 2s infinite linear alternate-reverse;
  }
  svg:nth-child(3) {
    fill: $fillHighlight2;
    left: ($left + 2) + px;
    animation: #{$name}-anim-2 3s infinite linear alternate-reverse;
  }
}
