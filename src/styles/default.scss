
// @import "../../node_modules/material-design-lite/src/_color-definitions.scss";
@import "../../node_modules/material-design-lite/src/_variables.scss";
// @import "../../node_modules/materialize-css/sass/components/mixins";
// @import "../../node_modules/materialize-css/sass/components/color";

// Variables;
// @import "../../node_modules/materialize-css/sass/components/variables";

// Reset
// @import "../../node_modules/materialize-css/sass/components/normalize";

// components
// @import "../../node_modules/materialize-css/sass/components/global";
// @import "materialize-css/sass/components/icons-material-design";
// @import "materialize-css/sass/components/grid";
// @import "materialize-css/sass/components/navbar";
// @import "materialize-css/sass/components/roboto";
// @import "materialize-css/sass/components/typography";
// @import "materialize-css/sass/components/cards";
// @import "materialize-css/sass/components/toast";
// @import "materialize-css/sass/components/tabs";
// @import "materialize-css/sass/components/tooltip";
// @import "../../node_modules/materialize-css/sass/components/buttons";
// @import "../../node_modules/materialize-css/sass/components/waves";
// @import "../../node_modules/materialize-css/sass/materialize";
//@import '../../node_modules/materialize-css/sass/components/_buttons.scss';
//@import '../../node_modules/materialize-css/sass/components/_waves.scss';

$orangedark:#F07818;
$orangelight:#F0A830;
$reddark:#E91818;
$beige:#FCEBB6;
$redlight:#E36937;
$bluelight:#91CED7;
$bluedark:#0F6177;
$braun:#9E5428;
$greendark:#27AE60;
$green:#799412;
$blacklight:#091414;

$roya-blue: rgba(140,200,233,1.0);
$roya-blue: #6f9;
$roya-blue: #FF3333;
$roya-blue: #69F;
$roya-blue: #96F;
$roya-blue: #F96;
$roya-blue:#91CED7;
$roya-blue:#81BED7;
$roya-blue:#81BED7;

$roya-blue:#69F;
$roya-blue:#61b6f9;
// $roya-blue:#68c4f7;

// $trim-color-classes: false !default;

// $color-primary: $palette-blue-800 !default;
// $color-primary-dark: $palette-red-500 !default;
// $color-accent: $palette-red-500 !default;

// $color-primary: $palette-pink-700 !default;
// $color-primary-dark: $palette-pink-700 !default;
// $color-accent: $palette-pink-700 !default;
// $color-primary-contrast: $palette-pink-700 !default;
// $color-accent-contrast: $palette-pink-700 !default;

// $backgroundimg:'../images/RoyaLearning9.png';


@mixin transitionAll($duration) {
    -webkit-transition: all $duration ease-out;
    -moz-transition: all $duration ease-out;
    -ms-transition: all $duration ease-out;
    -o-transition: all $duration ease-out;
    transition: all $duration ease-out;
}

@function number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }
  
  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
  
  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);
    
    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i))
    }
    
    @if $character == '.' {
      $digits: 1; 
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);  
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }
  
  @return if($minus, -$result, $result);;
}

@function getMdlColor($string) {

   $index : str-index($string,  ",");

   $r : number(str-slice($string, 1, $index - 1));
   $str-2 : str-slice($string, $index + 1);
   $index : str-index($str-2,  ",");
   $g : number(str-slice($str-2, 1, $index - 1));
   $b : number(str-slice($str-2, $index + 1));

   @return rgb($r,$g,$b);
}
