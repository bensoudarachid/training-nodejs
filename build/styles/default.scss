$color-primary: "133,149,150";
$color-primary-dark: $color-primary;
$color-accent: $color-primary;
@import "../../node_modules/material-design-lite/src/material-design-lite.scss";
$orangedark: #F07818;
$orangelight: #F0A830;
$reddark: #E91818;
$beige: #d4a281;
$redlight: #E36937;
$bluelight: #91CED7;
$bluedark: #0F6177;
$braun: #9E5428;
$greendark: #27AE60;
$green: #799412;
$blacklight: #091414;
$violet: #ab69c6;
$blue: #22A7F0;
$magenta: #17bbb0;
$pink: #ff6ca8;
$metallic: #8c9aa9;

$roya-blue: rgba(140, 200, 233, 1.0);
$roya-blue: #6f9;
$roya-blue: #FF3333;
$roya-blue: #69F;
$roya-blue: #96F;
$roya-blue: #F96;
$roya-blue: #91CED7;
$roya-blue: #81BED7;
$roya-blue: #81BED7;

$roya-blue: #69F;
$roya-blue: #61b6f9;
// $roya-blue:#68c4f7;


@import url('https://fonts.googleapis.com/css?family=Merienda');
$RoyaMainFont: 'Merienda', "Comic Sans MS", cursive, "Lucida Sans Unicode", "Lucida Grande", sans-serif;


@mixin transitionAll($duration) {
  -webkit-transition: all $duration ease-out;
  -moz-transition: all $duration ease-out;
  -ms-transition: all $duration ease-out;
  -o-transition: all $duration ease-out;
  transition: all $duration ease-out;
}

@mixin border-radius($radius) {
  border-radius: $radius;
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
}

@function number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i))
    }

    @if $character == '.' {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return if($minus, -$result, $result);;
}

@function getMdlColor($string) {

  $index: str-index($string, ",");
  $r: number(str-slice($string, 1, $index - 1));
  $str-2: str-slice($string, $index + 1);
  $index: str-index($str-2, ",");
  $g: number(str-slice($str-2, 1, $index - 1));
  $b: number(str-slice($str-2, $index + 1));

  @return rgb($r, $g, $b);
}

@mixin textGlitch($name, $intensity, $textColor, $background, $highlightColor1, $highlightColor2, $width, $height) {
  font-family: $RoyaMainFont, Tahoma, sans-serif;
  color: $textColor;
  position: relative;
  $steps: $intensity;

  @at-root {
    @for $i from 1 through 2 {
      @keyframes #{$name}-anim-#{$i} {
        @for $i from 0 through $steps/10 {
          #{percentage($i*(1/$steps))} {
            clip: rect(
                            random($height)+px,
                            $width+px,
                            random($height)+px,
                            0
            );
          }
        }
        @for $i from $steps/10 through $steps {
          #{percentage($i*(1/$steps))} {
            clip: rect(0, 0, 0, 0);
          }
        }
      }
    }
  }
  &:before,
  &:after {
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    background: $background;
    clip: rect(0, 0, 0, 0);
  }
  &:after {
    left: 1.5px;
    text-shadow: -2px 0 $highlightColor1;
    animation: #{$name}-anim-1 10s infinite linear alternate-reverse;
  }
  &:before {
    left: -1.5px;
    text-shadow: 2px 0 $highlightColor2;
    animation: #{$name}-anim-2 15s infinite linear alternate-reverse;
  }

}

@mixin imgGlitch($name, $intensity, $width, $height, $top, $left) {

  $steps: $intensity;

  @at-root {
    @for $i from 1 through 2 {
      @keyframes #{$name}-anim-#{$i} {
        @for $i from 0 through $steps {
          #{percentage($i*(1/$steps))} {
            clip: rect(
                            random($height)+px,
                            $width+px,
                            random($height)+px,
                            0
            );
          }
        }
      }
    }
  }

  > img {
    position: absolute;
    top: $top+px;
    left: $left+px;
  }
  > img:nth-child(2),
  > img:nth-child(3) {
    clip: rect(0, 0, 0, 0);
  }
  > img:nth-child(2) {
    left: ($left + 2) + px;
    animation: #{$name}-anim-1 2s infinite linear alternate-reverse;
  }
  > img:nth-child(3) {
    left: ($left - 2) + px;
    animation: #{$name}-anim-2 3s infinite linear alternate-reverse;
  }
}

@mixin svgGlitch($name, $intensity, $fillColor, $background, $fillHighlight1, $fillHighlight2, $width, $height, $top, $left) {
  $steps: $intensity;
  @at-root {
    @for $i from 1 through 2 {
      @keyframes #{$name}-anim-#{$i} {
        @for $i from 0 through $steps {
          #{percentage($i*(1/$steps))} {
            clip: rect(
                            (random($height)-20)+px,
                            $width+px,
                            (random($height)+20)+px,
                            0
            );
          }
        }
      }
    }
  }

  svg {
    position: absolute;
    top: $top+px;
    left: $left+px;
    fill: $fillColor;
    background: $background;
    width: $width+px;
    height: $height+px;
  }
  svg:nth-child(2),
  svg:nth-child(3) {
    clip: rect(0, 0, 0, 0);
  }
  svg:nth-child(2) {
    fill: $fillHighlight1;
    left: ($left - 2) + px;
    animation: #{$name}-anim-1 2s infinite linear alternate-reverse;
  }
  svg:nth-child(3) {
    fill: $fillHighlight2;
    left: ($left + 2) + px;
    animation: #{$name}-anim-2 3s infinite linear alternate-reverse;
  }
}

$eventcolor0: darken(getMdlColor($color-primary), 10%);
$eventcolor1: lighten($green, 10%);
$eventcolor2: $bluelight;
$eventcolor3: lighten($reddark, 20%); //#FFAC9C
$eventcolor4: lighten($orangelight, 10%);

:export {
  eventcolor0: $eventcolor0;
  eventcolor1: $eventcolor1;
  eventcolor2: $eventcolor2;
  eventcolor3: $eventcolor3;
  eventcolor4: $eventcolor4;
}
